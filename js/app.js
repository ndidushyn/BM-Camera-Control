/**
 * Toast Notification Manager
 */
class ToastManager {
    constructor() {
        this.container = document.getElementById('toast-container');
        if (!this.container) {
            console.error('Toast container not found! Creating fallback...');
            this.createFallbackContainer();
        }
        this.toasts = new Map();
        this.lastSuccessTime = 0;
        this.successCooldown = 30000; // 30 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –ø—Ä–æ —É—Å–ø—ñ—Ö
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ fallback –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
     */
    createFallbackContainer() {
        this.container = document.createElement('div');
        this.container.id = 'toast-container';
        this.container.className = 'toast-container';
        document.body.appendChild(this.container);
        console.log('Created fallback toast container');
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
    show(message, type = 'info', options = {}) {
        console.log('Toast.show called:', { message, type, options });
        
        if (!this.container) {
            console.error('Toast container is null!');
            return null;
        }

        const {
            title = '',
            duration = type === 'error' ? 2000 : 2000,
            persistent = false,
            id = null,
            icon = this.getDefaultIcon(type)
        } = options;

        // –î–ª—è success –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ cooldown
        if (type === 'success' && !persistent) {
            const now = Date.now();
            if (now - this.lastSuccessTime < this.successCooldown) {
                console.log('Success toast skipped due to cooldown');
                return null; // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω—ñ success –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            }
            this.lastSuccessTime = now;
        }

        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º –∂–µ ID —è–∫—â–æ –≤–æ–Ω–æ —ñ—Å–Ω—É—î
        if (id && this.toasts.has(id)) {
            this.remove(id);
        }

        const toastId = id || this.generateId();
        const toast = this.createElement(toastId, message, type, title, icon, duration, persistent);
        
        // console.log('Adding toast to container:', toastId); // Diagnostic removed
        this.container.appendChild(toast);
        this.toasts.set(toastId, toast);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        if (!persistent && duration > 0) {
            setTimeout(() => {
                this.remove(toastId);
            }, duration);
        }

        return toastId;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
     */
    showConnectionStatus(isConnected, message) {
        if (isConnected) {
            // –ü–æ–∫–∞–∑—É—î–º–æ success toast –ø—Ä–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            this.show(message, 'success', {
                title: '‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ',
                icon: 'üîó',
                id: 'connection-status'
            });
            // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ error –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            this.removeByPrefix('connection-error');
        }
        // –ù–ï –ø–æ–∫–∞–∑—É—î–º–æ error –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç—É—Ç - —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è –≤ –º–µ—Ç–æ–¥—ñ connect()
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    showStatusUpdate(success, message) {
        if (success) {
            // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ error –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            this.removeByPrefix('status-error');
            // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ success –¥–ª—è routine –æ–Ω–æ–≤–ª–µ–Ω—å
        } else {
            this.show(message, 'warning', {
                title: '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º',
                icon: 'üîÑ',
                id: 'status-error-' + Date.now(),
                duration: 2000
            });
        }
    }

    /**
     * –í–∏–¥–∞–ª–∏—Ç–∏ toast –∑–∞ ID
     */
    remove(id) {
        const toast = this.toasts.get(id);
        if (toast) {
            toast.classList.add('removing');
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
                this.toasts.delete(id);
            }, 300);
        }
    }

    /**
     * –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ toast –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
     */
    removeByPrefix(prefix) {
        for (const [id, toast] of this.toasts) {
            if (id.startsWith(prefix)) {
                this.remove(id);
            }
        }
    }

    /**
     * –°—Ç–≤–æ—Ä–∏—Ç–∏ DOM –µ–ª–µ–º–µ–Ω—Ç toast
     */
    createElement(id, message, type, title, icon, duration, persistent) {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.dataset.id = id;

        const progressBar = !persistent && duration > 0 ? 
            `<div class="toast-progress" style="animation-duration: ${duration}ms"></div>` : '';

        toast.innerHTML = `
            <div class="toast-header">
                <div class="toast-title">
                    <span class="toast-icon">${icon}</span>
                    ${title}
                </div>
                <button class="toast-close" type="button">&times;</button>
            </div>
            <div class="toast-message">${message}</div>
            ${progressBar}
        `;

        // –û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–∫—Ä–∏—Ç—Ç—è
        toast.querySelector('.toast-close').addEventListener('click', () => {
            this.remove(id);
        });

        return toast;
    }

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
     */
    getDefaultIcon(type) {
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };
        return icons[type] || '‚ÑπÔ∏è';
    }

    /**
     * –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID
     */
    generateId() {
        return 'toast-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Blackmagic –∫–∞–º–µ—Ä–æ—é
 */
class BlackmagicCameraApp {
    constructor() {
        this.camera = new BlackmagicCameraController();
        this.elements = {};
        this.updateInterval = null;
        this.focusThrottle = null; // –î–ª—è throttling —Ñ–æ–∫—É—Å–∞
        this.tintThrottle = null; // –î–ª—è throttling tint
        this.toast = new ToastManager(); // –î–æ–¥–∞—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        this.lastStatusCheckTime = 0; // –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
        this.lastConnectionState = false; // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        
        this.init();
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–∞
     */
    init() {
        this.bindElements();
        this.bindEvents();
        this.setupCallbacks();
    }

    /**
     * –ü—Ä–∏–≤'—è–∑–∫–∞ DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
     */
    bindElements() {
        // Connection elements
        this.elements.cameraIp = document.getElementById('camera-ip');
        this.elements.connectBtn = document.getElementById('connect-btn');
        this.elements.disconnectBtn = document.getElementById('disconnect-btn');
        this.elements.refreshStatusBtn = document.getElementById('refresh-status-btn');
        this.elements.connectionIndicator = document.getElementById('connection-indicator');
        this.elements.connectionText = document.getElementById('connection-text');
        this.elements.statusDot = document.getElementById('status-dot');

        // Video settings elements - —Ç—ñ–ª—å–∫–∏ —ñ—Å–Ω—É—é—á—ñ
        this.elements.currentGain = document.getElementById('current-gain');
        this.elements.currentShutter = document.getElementById('current-shutter');
        this.elements.currentWb = document.getElementById('current-wb');
        this.elements.currentTint = document.getElementById('current-tint');
        this.elements.currentFocus = document.getElementById('current-focus');
        this.elements.currentIris = document.getElementById('current-iris');

        // Control buttons - —Ç—ñ–ª—å–∫–∏ —ñ—Å–Ω—É—é—á—ñ
        this.elements.gainBtns = document.querySelectorAll('.gain-btn');
        this.elements.shutterBtns = document.querySelectorAll('.shutter-btn');
        this.elements.wbBtns = document.querySelectorAll('.wb-btn');
        this.elements.irisBtns = document.querySelectorAll('.iris-btn');

        // Enhanced WB controls
        this.elements.wbSlider = document.getElementById('wb-slider');
        this.elements.wbSliderValue = document.getElementById('wb-slider-value');
        this.elements.wbPresetBtns = document.querySelectorAll('.wb-preset-btn');
        this.elements.wbAdjustBtns = document.querySelectorAll('.wb-adjust-btn');
        this.elements.sliderMarkers = document.querySelectorAll('.marker');

        // Custom controls - —Ç—ñ–ª—å–∫–∏ —ñ—Å–Ω—É—é—á—ñ
        this.elements.customGain = document.getElementById('custom-gain');
        this.elements.setCustomGainBtn = document.getElementById('set-custom-gain-btn');
        this.elements.customShutter = document.getElementById('custom-shutter');
        this.elements.setCustomShutterBtn = document.getElementById('set-custom-shutter-btn');
        this.elements.customWb = document.getElementById('custom-wb');
        this.elements.setCustomWbBtn = document.getElementById('set-custom-wb-btn');
        this.elements.customIris = document.getElementById('custom-iris');
        this.elements.setCustomIrisBtn = document.getElementById('set-custom-iris-btn');

        // Slider controls - —Ç—ñ–ª—å–∫–∏ —ñ—Å–Ω—É—é—á—ñ
        this.elements.tintSlider = document.getElementById('tint-slider');
        this.elements.tintValue = document.getElementById('tint-value');
        this.elements.focusSlider = document.getElementById('focus-slider');

        // Focus controls - —Ç—ñ–ª—å–∫–∏ —ñ—Å–Ω—É—é—á—ñ
        this.elements.focusNearBtn = document.getElementById('focus-near-btn');
        this.elements.focusAutoBtn = document.getElementById('focus-auto-btn');
        this.elements.focusFarBtn = document.getElementById('focus-far-btn');

        // Preset elements - –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —ñ—Å–Ω—É–≤–∞–Ω–Ω—è
        this.elements.currentPreset = document.getElementById('current-preset');
        this.elements.currentPresetName = document.getElementById('current-preset-name');
        this.elements.presetsCount = document.getElementById('presets-count');
        this.elements.presetsStatusText = document.getElementById('presets-status-text');
        this.elements.refreshPresetsBtn = document.getElementById('refresh-presets-btn');
        this.elements.presetList = document.getElementById('preset-list');
        this.elements.newPresetName = document.getElementById('new-preset-name');
        this.elements.savePresetBtn = document.getElementById('save-preset-btn');
        this.elements.presetFileInput = document.getElementById('preset-file-input');
        this.elements.uploadPresetBtn = document.getElementById('upload-preset-btn');
        this.elements.refreshDataBtn = document.getElementById('refresh-data-btn');

        // Camera info elements
        this.elements.cameraInfoSection = document.getElementById('camera-info-section');
        this.elements.cameraId = document.getElementById('camera-id');
        this.elements.cameraCodec = document.getElementById('camera-codec');
        this.elements.cameraFramerate = document.getElementById('camera-framerate');
        this.elements.cameraRecordResolution = document.getElementById('camera-record-resolution');
        this.elements.cameraOffSpeed = document.getElementById('camera-off-speed');

        // Navigation elements
        this.elements.tabBtns = document.querySelectorAll('.tab-btn');
        this.elements.tabContents = document.querySelectorAll('.tab-content');
    }

    /**
     * –ü—Ä–∏–≤'—è–∑–∫–∞ –ø–æ–¥—ñ–π
     */
    bindEvents() {
        // Connection events
        this.elements.connectBtn.addEventListener('click', () => this.connect());
        this.elements.disconnectBtn.addEventListener('click', () => this.disconnect());
        this.elements.refreshStatusBtn.addEventListener('click', () => this.refreshStatus(true));

        // Gain controls
        this.elements.gainBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const gain = parseInt(btn.dataset.gain);
                this.setGain(gain);
            });
        });
        this.elements.setCustomGainBtn.addEventListener('click', () => {
            const gain = parseInt(this.elements.customGain.value);
            this.setGain(gain);
        });

        // Shutter controls
        this.elements.shutterBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const shutter = parseInt(btn.dataset.shutter);
                this.setShutter(shutter);
            });
        });
        this.elements.setCustomShutterBtn.addEventListener('click', () => {
            const shutter = parseInt(this.elements.customShutter.value);
            this.setShutter(shutter);
        });

        // White Balance controls
        this.elements.wbBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const wb = parseInt(btn.dataset.wb);
                this.setWhiteBalance(wb);
            });
        });
        this.elements.setCustomWbBtn.addEventListener('click', () => {
            const wb = parseInt(this.elements.customWb.value);
            this.setWhiteBalance(wb);
        });

        // Enhanced WB controls
        if (this.elements.wbSlider) {
            this.elements.wbSlider.addEventListener('input', (e) => {
                const value = parseInt(e.target.value);
                this.updateWbSliderDisplay(value);
            });
            
            this.elements.wbSlider.addEventListener('change', (e) => {
                const value = parseInt(e.target.value);
                this.setWhiteBalance(value);
            });
        }

        this.elements.wbPresetBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const wb = parseInt(btn.dataset.wb);
                this.setWhiteBalance(wb);
                this.updateWbSliderDisplay(wb);
            });
        });

        this.elements.wbAdjustBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const adjust = parseInt(btn.dataset.adjust);
                this.adjustWhiteBalance(adjust);
            });
        });

        this.elements.sliderMarkers.forEach(marker => {
            marker.addEventListener('click', () => {
                const temp = parseInt(marker.dataset.temp);
                this.setWhiteBalance(temp);
                this.updateWbSliderDisplay(temp);
            });
        });

        // Iris controls
        this.elements.irisBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const iris = parseFloat(btn.dataset.iris);
                this.setIris(iris);
            });
        });
        this.elements.setCustomIrisBtn.addEventListener('click', () => {
            const iris = parseFloat(this.elements.customIris.value);
            this.setIris(iris);
        });

        // Tint controls - —Ä–µ–∞–ª—å–Ω–∏–π —á–∞—Å –∑ throttling
        this.elements.tintSlider.addEventListener('input', (e) => {
            const tint = parseInt(e.target.value);
            this.elements.tintValue.textContent = tint;
            
            // –î–æ–¥–∞—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π –µ—Ñ–µ–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            this.elements.tintValue.classList.add('updating');
            setTimeout(() => {
                this.elements.tintValue.classList.remove('updating');
            }, 200);
            
            // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
            if (this.tintThrottle) {
                clearTimeout(this.tintThrottle);
            }
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä (–∑–∞—Ç—Ä–∏–º–∫–∞ 150–º—Å –¥–ª—è tint)
            this.tintThrottle = setTimeout(() => {
                this.setTint(tint);
            }, 150);
        });

        // Focus controls
        this.elements.focusNearBtn.addEventListener('click', () => this.adjustFocus(-0.1));
        this.elements.focusFarBtn.addEventListener('click', () => this.adjustFocus(0.1));
        this.elements.focusAutoBtn.addEventListener('click', () => this.triggerAutoFocus());
        
        // Focus slider - —Ä–µ–∞–ª—å–Ω–∏–π —á–∞—Å –∑ throttling
        this.elements.focusSlider.addEventListener('input', (e) => {
            const focus = parseFloat(e.target.value);
            
            // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
            if (this.focusThrottle) {
                clearTimeout(this.focusThrottle);
            }
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤–∏–π —Ç–∞–π–º–µ—Ä (–∑–∞—Ç—Ä–∏–º–∫–∞ 100–º—Å)
            this.focusThrottle = setTimeout(() => {
                this.setFocus(focus);
            }, 100);
        });

        // Preset controls - –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —ñ—Å–Ω—É–≤–∞–Ω–Ω—è
        if (this.elements.refreshPresetsBtn) {
            this.elements.refreshPresetsBtn.addEventListener('click', () => this.refreshPresets());
        }
        if (this.elements.savePresetBtn) {
            this.elements.savePresetBtn.addEventListener('click', () => this.saveNewPreset());
        }
        if (this.elements.uploadPresetBtn) {
            this.elements.uploadPresetBtn.addEventListener('click', () => {
                if (this.elements.presetFileInput) {
                    this.elements.presetFileInput.click();
                }
            });
        }
        if (this.elements.presetFileInput) {
            this.elements.presetFileInput.addEventListener('change', (e) => this.uploadPresetFile(e));
        }
        if (this.elements.refreshDataBtn) {
            this.elements.refreshDataBtn.addEventListener('click', () => this.refreshAllData());
        }

        // Tab navigation
        this.elements.tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const tabId = btn.dataset.tab;
                this.switchTab(tabId);
            });
        });

        // Preset view toggle
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                // –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω –∫–Ω–æ–ø–æ–∫
                document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ –≤–∏–≥–ª—è–¥ —Å–ø–∏—Å–∫—É
                const viewType = btn.dataset.view;
                if (this.elements.presetList) {
                    if (viewType === 'list') {
                        this.elements.presetList.classList.add('list-view');
                    } else {
                        this.elements.presetList.classList.remove('list-view');
                    }
                }
            });
        });

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤
        if (this.elements.presetFileInput) {
            this.elements.presetFileInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (file) {
                    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
                    if (this.elements.presetsStatusText) {
                        this.elements.presetsStatusText.textContent = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É "${file.name}"...`;
                    }
                }
                this.uploadPresetFile(e);
            });
        }

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–ª–∞–≤—ñ—à–∏ Enter –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É
        if (this.elements.newPresetName) {
            this.elements.newPresetName.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !this.elements.savePresetBtn.disabled) {
                    this.saveNewPreset();
                }
            });
            
            // –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥ –Ω–µ–±–∞–∂–∞–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            this.elements.newPresetName.addEventListener('input', (e) => {
                // –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤–∏—Ö —Å–∏—Å—Ç–µ–º
                const sanitized = e.target.value.replace(/[<>:"/\\|?*]/g, '');
                if (sanitized !== e.target.value) {
                    e.target.value = sanitized;
                }
            });
        }


    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è callback —Ñ—É–Ω–∫—Ü—ñ–π
     */
    setupCallbacks() {
        this.camera.setCallbacks(
            null, // –í–∏–¥–∞–ª–µ–Ω–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
            (isConnected, message) => this.updateConnectionStatus(isConnected, message)
        );
    }

    /**
     * –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–∞–º–µ—Ä–∏
     */
    async connect() {
        const cameraIp = this.elements.cameraIp.value.trim();
        if (!cameraIp) {
            this.toast.show('–í–≤–µ–¥—ñ—Ç—å IP –∞–¥—Ä–µ—Å—É –∞–±–æ hostname –∫–∞–º–µ—Ä–∏', 'warning', {
                title: '‚ö†Ô∏è –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–¥—Ä–µ—Å–∞',
                icon: 'üìù'
            });
            return;
        }

        this.setLoading(true);
        this.updateConnectionStatus(false, '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');
        
        // –ü–æ–∫–∞–∑—É—î–º–æ toast –ø—Ä–æ —Å–ø—Ä–æ–±—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        const connectingToastId = this.toast.show(`–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ${cameraIp}...`, 'info', {
            title: 'üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è',
            icon: 'üîå',
            id: 'connecting',
            persistent: true
        });

        try {
            await this.camera.connect(cameraIp);
            this.startPeriodicUpdate();
            this.updateUI();
            
            // –í–∏–¥–∞–ª—è—î–º–æ toast –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            this.toast.remove('connecting');
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–µ—Å–µ—Ç–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–º–µ—Ä—É –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            setTimeout(() => {
                this.refreshPresets();
                this.updateCameraInfo();
            }, 1000);
        } catch (error) {
            // –í–∏–¥–∞–ª—è—î–º–æ toast –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            this.toast.remove('connecting');
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            this.toast.show('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –∫–∞–º–µ—Ä–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–¥—Ä–µ—Å—É —Ç–∞ –º–µ—Ä–µ–∂–µ–≤–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è.', 'error', {
                title: '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è',
                icon: 'üîå',
                duration: 2000
            });
        } finally {
            this.setLoading(false);
        }
    }

    /**
     * –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –∫–∞–º–µ—Ä–∏
     */
    disconnect() {
        this.camera.disconnect();
        this.stopPeriodicUpdate();
        this.updateUI();
        this.clearCurrentValues();
        this.hideCameraInfo();
        
        // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        this.lastConnectionState = false;
        
        // –ü–æ–∫–∞–∑—É—î–º–æ toast –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        this.toast.show('–í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ –∫–∞–º–µ—Ä–∏', 'info', {
            title: '‚ÑπÔ∏è –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è',
            icon: 'üîå',
            duration: 2000
        });
        
        // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        this.toast.removeByPrefix('connection-error');
        this.toast.removeByPrefix('status-error');
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
     */
    async refreshStatus(isManual = false) {
        if (this.camera.isConnectionActive()) {
            try {
                await this.camera.refreshAllSettings();
                this.updateCurrentValues();
                console.log('–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ');
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (—Ü–µ –º–æ–∂–µ –ø–æ–∫–∞–∑–∞—Ç–∏ toast –ø—Ä–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≤'—è–∑–∫—É)
                this.updateConnectionStatus(true, '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ');
                
                // –ü–æ–∫–∞–∑—É—î–º–æ toast —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ —Ä—É—á–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
                if (isManual) {
                    this.toast.showStatusUpdate(true, '–î–∞–Ω—ñ –∫–∞–º–µ—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ');
                }
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error);
                
                // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —è–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ
                this.updateConnectionStatus(false, '–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è');
                
                // –ü–æ–∫–∞–∑—É—î–º–æ toast –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑–∞–≤–∂–¥–∏, –∫–æ–ª–∏ —î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º
                this.toast.showStatusUpdate(false, `–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${error.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`);
            }
        } else {
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —è–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ
            this.updateConnectionStatus(false, '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–∞–≤–∂–¥–∏
            this.toast.showStatusUpdate(false, '–ö–∞–º–µ—Ä–∞ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
     */
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è gain
     */
    async setGain(gain) {
        try {
            await this.camera.setGain(gain);
            setTimeout(() => this.updateGain(), 1000);
        } catch (error) {
            // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞
        }
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏—Ç—Ä–∏–º–∫–∏
     */
    async setShutter(shutter) {
        try {
            await this.camera.setShutter(shutter);
            setTimeout(() => this.updateShutter(), 1000);
        } catch (error) {
            // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞
        }
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±—ñ–ª–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
     */
    async setWhiteBalance(wb) {
        try {
            await this.camera.setWhiteBalance(wb);
            setTimeout(() => this.updateWhiteBalance(), 1000);
        } catch (error) {
            // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞
        }
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è tint
     */
    async setTint(tint) {
        try {
            await this.camera.setTint(tint);
            setTimeout(() => this.updateTint(), 1000);
        } catch (error) {
            // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞
        }
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ–∫—É—Å–∞
     */
    async setFocus(focus) {
        try {
            await this.camera.setFocus(focus);
            setTimeout(() => this.updateFocus(), 1000);
        } catch (error) {
            // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞
        }
    }

    /**
     * –ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è —Ñ–æ–∫—É—Å–∞
     */
    async adjustFocus(delta) {
        const currentFocus = this.camera.getCurrentSettings().focus || 0.5;
        const newFocus = Math.max(0, Math.min(1, currentFocus + delta));
        await this.setFocus(newFocus);
    }

    /**
     * –ê–≤—Ç–æ—Ñ–æ–∫—É—Å
     */
    async triggerAutoFocus() {
        try {
            await this.camera.triggerAutoFocus();
            setTimeout(() => this.updateFocus(), 2000);
        } catch (error) {
            // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞
        }
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥—ñ–∞—Ñ—Ä–∞–≥–º–∏
     */
    async setIris(iris) {
        try {
            await this.camera.setIris(iris);
            setTimeout(() => this.updateIris(), 1000);
        } catch (error) {
            // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    async refreshAllData() {
        try {
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = '–û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...';
            }
            
            // –Ø–∫—â–æ –∫–∞–º–µ—Ä–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞, –æ–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
            if (this.camera.isConnected()) {
                await Promise.all([
                    this.refreshPresets(),
                    this.updateVideoSettings(),
                    this.updateStatus(),
                    this.updateCameraInfo()
                ]);
            } else {
                // –Ø–∫—â–æ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–µ—Å–µ—Ç–∏ –∑ localStorage
                await this.refreshPresets();
            }
            
            // –ü–æ–∫–∞–∑—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = '–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ';
                setTimeout(() => {
                    if (this.elements.presetsStatusText) {
                        this.elements.presetsStatusText.textContent = '–ì–æ—Ç–æ–≤–æ';
                    }
                }, 2000);
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö';
            }
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–∞–º–µ—Ä—É
     */
    async updateCameraInfo() {
        if (!this.elements.cameraInfoSection) return;

        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ –±–ª–æ–∫ —è–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—á–∏–π
            this.showCameraInfoLoading();
            
            const [cameraInfo, cameraId] = await Promise.all([
                this.camera.getCameraInfo(),
                this.camera.getCameraId().catch(() => null)
            ]);
            
            if (cameraInfo) {
                // –û–Ω–æ–≤–ª—é—î–º–æ ID –∫–∞–º–µ—Ä–∏
                if (this.elements.cameraId) {
                    this.elements.cameraId.textContent = cameraId || '‚Äî';
                }
                
                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–¥–µ–∫
                if (this.elements.cameraCodec) {
                    this.elements.cameraCodec.textContent = cameraInfo.codec || '‚Äî';
                }
                
                // –û–Ω–æ–≤–ª—é—î–º–æ FPS
                if (this.elements.cameraFramerate) {
                    this.elements.cameraFramerate.textContent = cameraInfo.frameRate ? `${cameraInfo.frameRate} fps` : '‚Äî';
                }
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–¥—ñ–ª—å–Ω—ñ—Å—Ç—å
                if (this.elements.cameraRecordResolution) {
                    const recordRes = cameraInfo.recordResolution;
                    this.elements.cameraRecordResolution.textContent = recordRes ? 
                        `${recordRes.width}√ó${recordRes.height}` : '‚Äî';
                }
                
                // –û–Ω–æ–≤–ª—é—î–º–æ Off Speed
                if (this.elements.cameraOffSpeed) {
                    const offSpeedText = cameraInfo.offSpeedEnabled ? 
                        `–£–≤—ñ–º–∫–Ω–µ–Ω–æ (${cameraInfo.offSpeedFrameRate} fps)` : 
                        `–í–∏–º–∫–Ω–µ–Ω–æ (${cameraInfo.minOffSpeedFrameRate}-${cameraInfo.maxOffSpeedFrameRate} fps)`;
                    this.elements.cameraOffSpeed.textContent = offSpeedText;
                }
                
                // –ü–æ–∫–∞–∑—É—î–º–æ –±–ª–æ–∫ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
                this.showCameraInfo();
                this.clearCameraInfoLoading();
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–∞–º–µ—Ä—É:', error);
            this.showCameraInfoError();
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –±–ª–æ–∫ —è–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—á–∏–π
     */
    showCameraInfoLoading() {
        const values = [
            this.elements.cameraId,
            this.elements.cameraCodec,
            this.elements.cameraFramerate,
            this.elements.cameraRecordResolution,
            this.elements.cameraOffSpeed
        ];
        
        values.forEach(element => {
            if (element) {
                element.textContent = '...';
                element.className = 'info-value loading';
            }
        });
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    clearCameraInfoLoading() {
        const values = [
            this.elements.cameraId,
            this.elements.cameraCodec,
            this.elements.cameraFramerate,
            this.elements.cameraRecordResolution,
            this.elements.cameraOffSpeed
        ];
        
        values.forEach(element => {
            if (element) {
                element.className = 'info-value';
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –≤ –±–ª–æ—Ü—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
     */
    showCameraInfoError() {
        const values = [
            this.elements.cameraId,
            this.elements.cameraCodec,
            this.elements.cameraFramerate,
            this.elements.cameraRecordResolution,
            this.elements.cameraOffSpeed
        ];
        
        values.forEach(element => {
            if (element) {
                element.textContent = '–ü–æ–º–∏–ª–∫–∞';
                element.className = 'info-value error';
            }
        });
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –±–ª–æ–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–∞–º–µ—Ä—É
     */
    hideCameraInfo() {
        if (this.elements.cameraInfoSection) {
            this.elements.cameraInfoSection.style.display = 'none';
            this.elements.cameraInfoSection.classList.remove('visible');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –±–ª–æ–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–∞–º–µ—Ä—É
     */
    showCameraInfo() {
        if (this.elements.cameraInfoSection) {
            this.elements.cameraInfoSection.style.display = 'block';
            // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é –¥–ª—è –ø–ª–∞–≤–Ω–æ—ó –∞–Ω—ñ–º–∞—Ü—ñ—ó
            setTimeout(() => {
                this.elements.cameraInfoSection.classList.add('visible');
            }, 50);
        }
    }

    /**
     * PRESET METHODS
     */

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–µ—Å–µ—Ç—ñ–≤
     */
    async refreshPresets() {
        if (!this.elements.presetList) {
            console.warn('–ï–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫—É –ø—Ä–µ—Å–µ—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            this.elements.presetList.innerHTML = `
                <div class="preset-card loading">
                    <div class="preset-card-content">
                        <div class="preset-loading-animation"></div>
                        <span>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
                    </div>
                </div>
            `;
            
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—ñ–≤...';
            }
            
            const [presets, activePreset] = await Promise.all([
                this.camera.getPresets(),
                this.camera.getActivePreset().catch(() => null)
            ]);
            
            this.updatePresetList(presets, activePreset);
            
            if (this.elements.currentPreset) {
                this.elements.currentPreset.textContent = activePreset || '–ù–µ–≤—ñ–¥–æ–º–æ';
            }
            
        } catch (error) {
            this.elements.presetList.innerHTML = `
                <div class="preset-card loading">
                    <div class="preset-card-content">
                        <span style="color: #ff6b6b;">‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</span>
                    </div>
                </div>
            `;
            
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—ñ–≤';
            }
            
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—ñ–≤:', error);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–µ—Å–µ—Ç—ñ–≤
     */
    updatePresetList(presets, activePreset) {
        if (!this.elements.presetList) {
            console.warn('–ï–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫—É –ø—Ä–µ—Å–µ—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (this.elements.presetsCount) {
            this.elements.presetsCount.textContent = `${presets ? presets.length : 0} –ø—Ä–µ—Å–µ—Ç—ñ–≤`;
        }
        
        if (this.elements.currentPresetName) {
            this.elements.currentPresetName.textContent = activePreset || '–ù–µ–º–∞—î';
        }

        if (this.elements.presetsStatusText) {
            if (presets && presets.length > 0) {
                this.elements.presetsStatusText.textContent = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${presets.length} –ø—Ä–µ—Å–µ—Ç—ñ–≤`;
            } else {
                this.elements.presetsStatusText.textContent = '–ü—Ä–µ—Å–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
            }
        }

        if (!presets || presets.length === 0) {
            this.elements.presetList.innerHTML = `
                <div class="preset-card loading">
                    <div class="preset-card-content">
                        <div class="preset-loading-animation"></div>
                        <span>–ü—Ä–µ—Å–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</span>
                    </div>
                </div>
            `;
            return;
        }

        this.elements.presetList.innerHTML = '';
        
        presets.forEach(preset => {
            const presetCard = document.createElement('div');
            presetCard.className = `preset-card ${preset === activePreset ? 'active' : ''}`;
            
            presetCard.innerHTML = `
                <div class="preset-card-content">
                    <h4 class="preset-name">${preset}</h4>
                    <div class="preset-actions">
                        <button type="button" class="preset-action-btn load" data-preset="${preset}" title="–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–µ—Å–µ—Ç">
                            <span>üéØ</span>
                            <span>–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏</span>
                        </button>
                        <button type="button" class="preset-action-btn download" data-preset="${preset}" title="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–µ—Å–µ—Ç">
                            <span>üíæ</span>
                            <span>–°–∫–∞—á–∞—Ç–∏</span>
                        </button>
                        <button type="button" class="preset-action-btn delete" data-preset="${preset}" title="–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ—Å–µ—Ç">
                            <span>üóëÔ∏è</span>
                            <span>–í–∏–¥–∞–ª–∏—Ç–∏</span>
                        </button>
                    </div>
                </div>
            `;
            
            this.elements.presetList.appendChild(presetCard);
        });

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
        this.elements.presetList.querySelectorAll('.preset-action-btn.load').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.loadPreset(e.currentTarget.dataset.preset);
            });
        });
        
        this.elements.presetList.querySelectorAll('.preset-action-btn.download').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.downloadPreset(e.currentTarget.dataset.preset);
            });
        });
        
        this.elements.presetList.querySelectorAll('.preset-action-btn.delete').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.deletePreset(e.currentTarget.dataset.preset);
            });
        });

        // –î–æ–¥–∞—î–º–æ –∫–ª—ñ–∫ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–µ—Å–µ—Ç—É
        this.elements.presetList.querySelectorAll('.preset-card:not(.loading)').forEach(card => {
            card.addEventListener('click', (e) => {
                if (!e.target.closest('.preset-actions')) {
                    const presetName = card.querySelector('.preset-name').textContent;
                    this.loadPreset(presetName);
                }
            });
        });
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ø—Ä–µ—Å–µ—Ç—É
     */
    async loadPreset(presetName) {
        try {
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = `–ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ø—Ä–µ—Å–µ—Ç—É "${presetName}"...`;
            }

            // –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–º—ñ—á–∞—î–º–æ –ø—Ä–µ—Å–µ—Ç —è–∫ –∞–∫—Ç–∏–≤–Ω–∏–π –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–≥—É–∫—É
            this.elements.presetList.querySelectorAll('.preset-card').forEach(card => {
                card.classList.remove('active');
                if (card.querySelector('.preset-name').textContent === presetName) {
                    card.classList.add('active');
                }
            });

            await this.camera.setActivePreset(presetName);
            
            if (this.elements.currentPreset) {
                this.elements.currentPreset.textContent = presetName;
            }
            
            if (this.elements.currentPresetName) {
                this.elements.currentPresetName.textContent = presetName;
            }
            
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = `–ü—Ä–µ—Å–µ—Ç "${presetName}" –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ`;
            }
            
            // –ü–æ–∫–∞–∑—É—î–º–æ toast –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –∞–∫—Ç–∏–≤–∞—Ü—ñ—é
            this.toast.show(`–ü—Ä–µ—Å–µ—Ç "${presetName}" –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ`, 'success', {
                title: '‚úÖ –ü—Ä–µ—Å–µ—Ç –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ',
                icon: 'üéØ',
                duration: 2000
            });
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç—ñ–≤
            setTimeout(() => {
                this.refreshStatus();
                this.refreshPresets();
            }, 1000);
            
        } catch (error) {
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            this.refreshPresets();
            
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = `–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–µ—Å–µ—Ç—É`;
            }
            
            console.error('–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø—Ä–µ—Å–µ—Ç—É:', error);
            
            // –ü–æ–∫–∞–∑—É—î–º–æ toast –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            this.toast.show(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–µ—Å–µ—Ç "${presetName}": ${error.message}`, 'error', {
                title: '‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–µ—Å–µ—Ç—É',
                icon: '‚ö†Ô∏è',
                duration: 2000
            });
        }
    }

    /**
     * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ—Å–µ—Ç—É
     */
    async saveNewPreset() {
        if (!this.elements.newPresetName) {
            console.warn('–ï–ª–µ–º–µ–Ω—Ç –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –ø—Ä–µ—Å–µ—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        const presetName = this.elements.newPresetName.value.trim();
        if (!presetName) {
            this.toast.show('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–µ—Å–µ—Ç—É', 'warning', {
                title: '‚ö†Ô∏è –ù–∞–∑–≤–∞ –ø—Ä–µ—Å–µ—Ç—É',
                icon: 'üìù'
            });
            this.elements.newPresetName.focus();
            return;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏
        if (presetName.length < 3) {
            this.toast.show('–ù–∞–∑–≤–∞ –ø—Ä–µ—Å–µ—Ç—É –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏', 'warning', {
                title: '‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞',
                icon: 'üìè'
            });
            this.elements.newPresetName.focus();
            return;
        }

        try {
            // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ—Ü–µ—Å
            if (this.elements.savePresetBtn) {
                this.elements.savePresetBtn.disabled = true;
                this.elements.savePresetBtn.innerHTML = `
                    <span class="btn-icon">‚è≥</span>
                    <span class="btn-text">–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...</span>
                `;
            }
            
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = `–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É "${presetName}"...`;
            }

            await this.camera.savePreset(presetName);
            
            // –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ –≤–≤–æ–¥—É
            this.elements.newPresetName.value = '';
            
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = `–ü—Ä–µ—Å–µ—Ç "${presetName}" —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ`;
            }
            
            // –ü–æ–∫–∞–∑—É—î–º–æ toast –ø—Ä–æ —É—Å–ø—ñ—Ö
            this.toast.show(`–ü—Ä–µ—Å–µ—Ç "${presetName}" —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ`, 'success', {
                title: '‚úÖ –ü—Ä–µ—Å–µ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ',
                icon: 'üíæ',
                duration: 2000
            });
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç—ñ–≤
            setTimeout(() => this.refreshPresets(), 500);
            
        } catch (error) {
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É';
            }
            
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É:', error);
            
            // –ü–æ–∫–∞–∑—É—î–º–æ toast –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            this.toast.show(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä–µ—Å–µ—Ç: ${error.message}`, 'error', {
                title: '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è',
                icon: 'üíæ',
                duration: 2000
            });
        } finally {
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
            if (this.elements.savePresetBtn) {
                this.elements.savePresetBtn.disabled = false;
                this.elements.savePresetBtn.innerHTML = `
                    <span class="btn-icon">üíæ</span>
                    <span class="btn-text">–ó–±–µ—Ä–µ–≥—Ç–∏</span>
                `;
            }
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É —è–∫ —Ñ–∞–π–ª—É
     */
    async downloadPreset(presetName) {
        try {
            const blob = await this.camera.downloadPreset(presetName);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${presetName}.preset`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É:', error);
            alert(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É: ${error.message}`);
        }
    }

    /**
     * –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É
     */
    async deletePreset(presetName) {
        // –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –¥—ñ–∞–ª–æ–≥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        const confirmed = confirm(
            `‚ö†Ô∏è –£–í–ê–ì–ê!\n\n–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ—Å–µ—Ç "${presetName}"?\n\n–¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏.`
        );
        
        if (!confirmed) {
            return;
        }

        try {
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = `–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É "${presetName}"...`;
            }

            // –¢–∏–º—á–∞—Å–æ–≤–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ—Å–µ—Ç—É
            const presetCards = this.elements.presetList.querySelectorAll('.preset-card');
            presetCards.forEach(card => {
                if (card.querySelector('.preset-name')?.textContent === presetName) {
                    card.style.opacity = '0.5';
                    card.style.pointerEvents = 'none';
                }
            });

            await this.camera.deletePreset(presetName);
            
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = `–ü—Ä–µ—Å–µ—Ç "${presetName}" –≤–∏–¥–∞–ª–µ–Ω–æ`;
            }
            
            setTimeout(() => this.refreshPresets(), 500);
            
        } catch (error) {
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≤–∏–¥–∏–º—ñ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            const presetCards = this.elements.presetList.querySelectorAll('.preset-card');
            presetCards.forEach(card => {
                card.style.opacity = '';
                card.style.pointerEvents = '';
            });
            
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = '–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É';
            }
            
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É:', error);
            alert(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–µ—Å–µ—Ç—É: ${error.message}`);
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—Ä–µ—Å–µ—Ç—É
     */
    async uploadPresetFile(event) {
        const file = event.target.files[0];
        if (!file) return;

        try {
            // –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫—É —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ—Ü–µ—Å
            if (this.elements.uploadPresetBtn) {
                this.elements.uploadPresetBtn.disabled = true;
                this.elements.uploadPresetBtn.innerHTML = `
                    <span class="btn-icon">‚è≥</span>
                    <span class="btn-text">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>
                `;
            }

            const presetName = await this.camera.uploadPreset(file);
            
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = `–§–∞–π–ª "${file.name}" —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —è–∫ "${presetName}"`;
            }
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            setTimeout(() => {
                alert(`–ü—Ä–µ—Å–µ—Ç "${presetName}" —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É`);
            }, 100);
            
            setTimeout(() => this.refreshPresets(), 500);
            
        } catch (error) {
            if (this.elements.presetsStatusText) {
                this.elements.presetsStatusText.textContent = `–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É "${file.name}"`;
            }
            
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—Ä–µ—Å–µ—Ç—É:', error);
            alert(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—Ä–µ—Å–µ—Ç—É: ${error.message}`);
        } finally {
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É —Ç–∞ –æ—á–∏—â–∞—î–º–æ —ñ–Ω–ø—É—Ç
            if (this.elements.uploadPresetBtn) {
                this.elements.uploadPresetBtn.disabled = false;
                this.elements.uploadPresetBtn.innerHTML = `
                    <span class="btn-icon">üì§</span>
                    <span class="btn-text">–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ .preset —Ñ–∞–π–ª</span>
                `;
            }
            
            // –û—á–∏—â–∞—î–º–æ —ñ–Ω–ø—É—Ç
            event.target.value = '';
        }
    }

    /**
     * –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Å—É
     */
    async startRecording() {
        try {
            await this.camera.startRecording();
            this.updateRecordingStatus();
        } catch (error) {
            // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞
        }
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Å—É
     */
    async stopRecording() {
        try {
            await this.camera.stopRecording();
            this.updateRecordingStatus();
        } catch (error) {
            // –ü–æ–º–∏–ª–∫–∞ –≤–∂–µ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–∞
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–µ–¥—ñ–∞
     */
    async getMediaInfo() {
        try {
            const info = await this.camera.getMediaInfo();
            if (info) {
                this.elements.storageRemaining.textContent = info.remainingRecordTime || '–ù–µ–≤—ñ–¥–æ–º–æ';
                this.elements.clipCount.textContent = info.clipCount || '0';
            }
        } catch (error) {
            this.elements.storageRemaining.textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
            this.elements.clipCount.textContent = '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
     */
    updateUI() {
        this.updateCurrentValues();
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
     */
    updateCurrentValues() {
        this.updateGain();
        this.updateShutter();
        // –î–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
     */
    clearCurrentValues() {
        this.elements.currentGain.textContent = '‚ùì';
        this.elements.currentShutter.textContent = '‚ùì';
        this.elements.currentWb.textContent = '‚ùì';
        this.elements.currentTint.textContent = '‚ùì';
        this.elements.currentFocus.textContent = '‚ùì';
        this.elements.currentIris.textContent = '‚ùì';
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∫–æ—Ä–µ–∫—Ü—ñ—ó –∫–æ–ª—å–æ—Ä—É - –∑–∞–≥–ª—É—à–∫–∞
     */
    clearColorCorrectionValues() {
        // –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó –∫–æ—Ä–µ–∫—Ü—ñ—ó –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –Ω–µ–∑–∞–±–∞—Ä–æ–º
        console.log('–ö–æ–ª—å–æ—Ä–æ–≤–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –º–∞–π–±—É—Ç–Ω—ñ—Ö –≤–µ—Ä—Å—ñ—è—Ö');
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    startPeriodicUpdate() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }
        this.updateInterval = setInterval(() => {
            this.refreshStatus();
        }, 10000); // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    stopPeriodicUpdate() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    setLoading(loading) {
        this.elements.connectBtn.disabled = loading;
        if (loading) {
            this.elements.connectBtn.innerHTML = '<span class="btn-icon">‚è≥</span> –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...';
        } else {
            this.elements.connectBtn.innerHTML = '<span class="btn-icon">üîå</span> –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏';
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
     */
    updateConnectionStatus(isConnected, message) {
        const wasConnected = this.lastConnectionState;
        
        if (isConnected) {
            this.elements.statusDot.className = 'status-dot online';
            this.elements.connectionText.textContent = message || '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ';
            this.enableControls(true);
            
            // –ü–æ–∫–∞–∑—É—î–º–æ toast —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ä–æ–∑—Ä–∏–≤—É
            if (!wasConnected) {
                this.toast.showConnectionStatus(true, message || '–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –∫–∞–º–µ—Ä–∏');
            }
        } else {
            this.elements.statusDot.className = 'status-dot offline';
            this.elements.connectionText.textContent = message || '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ';
            this.enableControls(false);
            
            // –ù–ï –ø–æ–∫–∞–∑—É—î–º–æ toast —Ç—É—Ç - —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è –≤ –º–µ—Ç–æ–¥—ñ connect()
            // –¶–µ–π –º–µ—Ç–æ–¥ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI —Å—Ç–∞—Ç—É—Å—É
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        this.lastConnectionState = isConnected;

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ –ø—Ä–µ—Å–µ—Ç—ñ–≤
        if (this.elements.presetsStatusText) {
            if (isConnected) {
                this.elements.presetsStatusText.textContent = '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –ø—Ä–µ—Å–µ—Ç–∏...';
            } else {
                this.elements.presetsStatusText.textContent = '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...';
            }
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç—ñ–≤ –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ
        if (isConnected && this.elements.presetList) {
            this.elements.presetList.innerHTML = `
                <div class="preset-card loading">
                    <div class="preset-card-content">
                        <div class="preset-loading-animation"></div>
                        <span>–ì–æ—Ç–æ–≤–æ –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</span>
                    </div>
                </div>
            `;
        }
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–Ω—è/–≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—ñ–≤
     */
    enableControls(enabled) {
        // –û—Å–Ω–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        this.elements.connectBtn.disabled = enabled;
        this.elements.disconnectBtn.disabled = !enabled;
        this.elements.refreshStatusBtn.disabled = !enabled;

        // Gain –∫–æ–Ω—Ç—Ä–æ–ª–∏
        this.elements.gainBtns.forEach(btn => btn.disabled = !enabled);
        this.elements.setCustomGainBtn.disabled = !enabled;
        this.elements.customGain.disabled = !enabled;

        // Shutter –∫–æ–Ω—Ç—Ä–æ–ª–∏
        this.elements.shutterBtns.forEach(btn => btn.disabled = !enabled);
        this.elements.setCustomShutterBtn.disabled = !enabled;
        this.elements.customShutter.disabled = !enabled;

        // White Balance –∫–æ–Ω—Ç—Ä–æ–ª–∏
        this.elements.wbBtns.forEach(btn => btn.disabled = !enabled);
        this.elements.setCustomWbBtn.disabled = !enabled;
        this.elements.customWb.disabled = !enabled;

        // Enhanced WB –∫–æ–Ω—Ç—Ä–æ–ª–∏
        if (this.elements.wbSlider) this.elements.wbSlider.disabled = !enabled;
        this.elements.wbPresetBtns.forEach(btn => btn.disabled = !enabled);
        this.elements.wbAdjustBtns.forEach(btn => btn.disabled = !enabled);

        // Tint –∫–æ–Ω—Ç—Ä–æ–ª–∏
        this.elements.tintSlider.disabled = !enabled;

        // Focus –∫–æ–Ω—Ç—Ä–æ–ª–∏
        this.elements.focusSlider.disabled = !enabled;
        this.elements.focusNearBtn.disabled = !enabled;
        this.elements.focusAutoBtn.disabled = !enabled;
        this.elements.focusFarBtn.disabled = !enabled;

        // Iris –∫–æ–Ω—Ç—Ä–æ–ª–∏
        this.elements.irisBtns.forEach(btn => btn.disabled = !enabled);
        this.elements.setCustomIrisBtn.disabled = !enabled;
        this.elements.customIris.disabled = !enabled;

        // Preset –∫–æ–Ω—Ç—Ä–æ–ª–∏ - –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —ñ—Å–Ω—É–≤–∞–Ω–Ω—è
        if (this.elements.refreshPresetsBtn) {
            this.elements.refreshPresetsBtn.disabled = !enabled;
        }
        if (this.elements.savePresetBtn) {
            this.elements.savePresetBtn.disabled = !enabled;
        }
        if (this.elements.newPresetName) {
            this.elements.newPresetName.disabled = !enabled;
        }
        if (this.elements.uploadPresetBtn) {
            this.elements.uploadPresetBtn.disabled = !enabled;
        }
        if (this.elements.presetFileInput) {
            this.elements.presetFileInput.disabled = !enabled;
        }
    }

    /**
     * –í–∫–ª—é—á–µ–Ω–Ω—è/–≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—ñ–≤ –∫–æ—Ä–µ–∫—Ü—ñ—ó –∫–æ–ª—å–æ—Ä—É - –∑–∞–≥–ª—É—à–∫–∞
     */
    enableColorCorrectionControls(enabled) {
        // –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó –∫–æ—Ä–µ–∫—Ü—ñ—ó –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –Ω–µ–∑–∞–±–∞—Ä–æ–º
        console.log('–ö–æ–Ω—Ç—Ä–æ–ª–∏ –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó –∫–æ—Ä–µ–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –ø—ñ–∑–Ω—ñ—à–µ');
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è gain –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
     */
    updateGain() {
        if (this.camera.currentSettings.gain !== null) {
            this.elements.currentGain.textContent = `${this.camera.currentSettings.gain} dB`;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è shutter –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
     */
    updateShutter() {
        if (this.camera.currentSettings.shutter !== null) {
            this.elements.currentShutter.textContent = `1/${this.camera.currentSettings.shutter}`;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è iris –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
     */
    updateIris() {
        if (this.camera.currentSettings.iris !== null) {
            this.elements.currentIris.textContent = `f/${this.camera.currentSettings.iris}`;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è tint –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
     */
    updateTint() {
        if (this.camera.currentSettings.tint !== null) {
            this.elements.currentTint.textContent = `${this.camera.currentSettings.tint}`;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è focus –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
     */
    updateFocus() {
        if (this.camera.currentSettings.focus !== null) {
            this.elements.currentFocus.textContent = `${(this.camera.currentSettings.focus * 100).toFixed(1)}%`;
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
     */
    updateCurrentValues() {
        this.updateGain();
        this.updateShutter();
        this.updateIris();
        this.updateTint();
        this.updateFocus();
        
        if (this.camera.currentSettings.whiteBalance !== null) {
            this.elements.currentWb.textContent = `${this.camera.currentSettings.whiteBalance}K`;
            this.updateWbPresetButtons(this.camera.currentSettings.whiteBalance);
        }
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
     */
    clearCurrentValues() {
        this.elements.currentGain.textContent = '‚ùì';
        this.elements.currentShutter.textContent = '‚ùì';
        this.elements.currentIris.textContent = '‚ùì';
        this.elements.currentTint.textContent = '‚ùì';
        this.elements.currentFocus.textContent = '‚ùì';
        this.elements.currentWb.textContent = '‚ùì';
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
     */
    updateSystemInfo() {
        // –¶–µ –º–æ–∂–Ω–∞ –±—É–¥–µ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ API
    }

    /**
     * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏
     */
    switchTab(tabId) {
        // –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –≤–∫–ª–∞–¥–æ–∫ —Ç–∞ –∫–Ω–æ–ø–æ–∫
        this.elements.tabBtns.forEach(btn => btn.classList.remove('active'));
        this.elements.tabContents.forEach(content => content.classList.remove('active'));

        // –î–æ–¥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –æ–±—Ä–∞–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
        const activeBtn = document.querySelector(`[data-tab="${tabId}"]`);
        const activeContent = document.getElementById(`${tabId}-tab`);

        if (activeBtn) activeBtn.classList.add('active');
        if (activeContent) activeContent.classList.add('active');

        // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –≤–∫–ª–∞–¥–æ–∫
        if (tabId === 'camera') {
            // –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–∞–º–µ—Ä–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (this.camera.isConnectionActive()) {
                this.refreshStatus();
            }
        } else if (tabId === 'color') {
            // Placeholder for color correction functionality
            console.log('–ö–æ–ª—å–æ—Ä–æ–≤–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º');
        } else if (tabId === 'presets') {
            // –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–µ—Å–µ—Ç–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if (this.camera.isConnectionActive()) {
                this.refreshPresets();
            }
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ª–∞–π–¥–µ—Ä–∞ WB
     */
    updateWbSliderDisplay(value) {
        if (this.elements.wbSliderValue) {
            this.elements.wbSliderValue.textContent = `${value}K`;
        }
        if (this.elements.wbSlider) {
            this.elements.wbSlider.value = value;
        }
    }

    /**
     * –®–≤–∏–¥–∫–µ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –±—ñ–ª–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
     */
    async adjustWhiteBalance(adjustment) {
        try {
            const currentWb = await this.camera.getWhiteBalance();
            if (currentWb) {
                const newWb = Math.max(2500, Math.min(10000, currentWb + adjustment));
                await this.setWhiteBalance(newWb);
                this.updateWbSliderDisplay(newWb);
            }
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è –±—ñ–ª–æ–≥–æ –±–∞–ª–∞–Ω—Å—É:', error);
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–µ—Å–µ—Ç—ñ–≤ WB
     */
    updateWbPresetButtons(currentWb) {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ä—ñ –∫–Ω–æ–ø–∫–∏
        this.elements.wbBtns.forEach(btn => {
            const wb = parseInt(btn.dataset.wb);
            btn.classList.toggle('active', wb === currentWb);
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–≤—ñ –∏–º–µ–Ω–æ–≤–∞–Ω—ñ –ø—Ä–µ—Å–µ—Ç–∏
        this.elements.wbPresetBtns.forEach(btn => {
            const wb = parseInt(btn.dataset.wb);
            btn.classList.toggle('active', wb === currentWb);
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ª–∞–π–¥–µ—Ä
        this.updateWbSliderDisplay(currentWb);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –±—ñ–ª–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
     */
    updateWhiteBalance() {
        if (this.camera.currentSettings.whiteBalance !== null) {
            const wb = this.camera.currentSettings.whiteBalance;
            this.elements.currentWb.textContent = `${wb}K`;
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ª–∞–π–¥–µ—Ä –±—ñ–ª–æ–≥–æ –±–∞–ª–∞–Ω—Å—É
            if (this.elements.wbSlider) {
                this.elements.wbSlider.value = wb;
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–∞–π–¥–µ—Ä–∞
            if (this.elements.wbSliderValue) {
                this.elements.wbSliderValue.textContent = `${wb}K`;
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω –ø—Ä–µ—Å–µ—Ç—ñ–≤
            this.updateWbPresetButtons(wb);
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ MIDI –∫–æ–º–∞–Ω–¥
     */
    handleMIDICommand(functionId, normalizedValue) {
        if (!this.camera.isConnectionActive()) {
            console.warn('–ö–∞–º–µ—Ä–∞ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ - MIDI –∫–æ–º–∞–Ω–¥–∞ —ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è');
            this.toast.show('MIDI —Å–∏–≥–Ω–∞–ª –æ—Ç—Ä–∏–º–∞–Ω–æ, –∞–ª–µ –∫–∞–º–µ—Ä–∞ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞', 'warning');
            return;
        }

        switch (functionId) {
            // –§—É–Ω–∫—Ü—ñ—ó –∑–∞–ø–∏—Å—É
            case 'record-start':
                this.startRecording();
                break;
            case 'record-stop':
                this.stopRecording();
                break;
            case 'record-toggle':
                // –†–µ–∞–ª—ñ–∑—É—î–º–æ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
                if (this.camera.currentSettings.recording) {
                    this.stopRecording();
                } else {
                    this.startRecording();
                }
                break;
            
            // –ö–µ—Ä—É–≤–∞–Ω–Ω—è —Å–≤—ñ—Ç–ª–∞ –∫–∞–º–µ—Ä–∏ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è gain
            case 'light0db':
                this.setGain(0);
                break;
            case 'light2db':
                this.setGain(2);
                break;
            case 'light4db':
                this.setGain(4);
                break;
            case 'light6db':
                this.setGain(6);
                break;
            case 'light8db':
                this.setGain(8);
                break;
            case 'light10db':
                this.setGain(10);
                break;
            case 'light12db':
                this.setGain(12);
                break;
            case 'light14db':
                this.setGain(14);
                break;
            case 'light16db':
                this.setGain(16);
                break;
            case 'light18db':
                this.setGain(18);
                break;
            case 'light20db':
                this.setGain(20);
                break;
            case 'light22db':
                this.setGain(22);
                break;
            case 'light24db':
                this.setGain(24);
                break;
            case 'light26db':
                this.setGain(26);
                break;
            
            // –ü–ª–∞–≤–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è (–∑ normalized value)
            case 'gain':
                // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω 0-26 dB
                const gainValue = Math.round(normalizedValue * 26);
                this.setGain(gainValue);
                break;
            case 'shutter':
                // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω –≤–∏—Ç—Ä–∏–º–∫–∏
                const shutterValue = Math.round(50 + (normalizedValue * 950)); // 50-1000
                this.setShutter(shutterValue);
                break;
            case 'whiteBalance':
                this.setWhiteBalance(wbValue);
                break;
            case 'tint':
                // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω –≤—ñ–¥—Ç—ñ–Ω–∫—É (-50 –¥–æ +50)
                const tintValue = Math.round((normalizedValue - 0.5) * 100);
                this.setTint(tintValue);
                break;
            case 'focus':
                this.setFocus(normalizedValue);
                break;
            case 'iris':
                this.setIris(normalizedValue);
                break;
            
            // –ö—Ä–æ–∫–æ–≤—ñ –∑–º—ñ–Ω–∏
            case 'iso-up':
                this.adjustGain(2);
                break;
            case 'iso-down':
                this.adjustGain(-2);
                break;
            case 'shutter-up':
                this.adjustShutter(50);
                break;
            case 'shutter-down':
                this.adjustShutter(-50);
                break;
            case 'focus-near':
                this.adjustFocus(-0.1);
                break;
            case 'focus-far':
                this.adjustFocus(0.1);
                break;
            
            default:
                console.warn(`–ù–µ–≤—ñ–¥–æ–º–∞ MIDI —Ñ—É–Ω–∫—Ü—ñ—è: ${functionId}`);
        }
    }

    /**
     * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è gain
     */
    async adjustGain(adjustment) {
        try {
            const currentGain = await this.camera.getGain() || 0;
            const newGain = Math.max(0, Math.min(26, currentGain + adjustment));
            await this.setGain(newGain);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è gain:', error);
        }
    }

    /**
     * –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∏–º–∫–∏
     */
    async adjustShutter(adjustment) {
        try {
            const currentShutter = await this.camera.getShutter() || 50;
            const newShutter = Math.max(50, Math.min(2000, currentShutter + adjustment));
            await this.setShutter(newShutter);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ—Ä–µ–≥—É–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∏–º–∫–∏:', error);
        }
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–∞ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
    window.app = new BlackmagicCameraApp();
    window.cameraController = window.app.camera; // –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è MIDI –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
window.addEventListener('error', (event) => {
    console.error('JavaScript Error:', event.error);
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('Unhandled Promise Rejection:', event.reason);
});
